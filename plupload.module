<?php 
// $Id$ 

/**
 * Implementation of hook_perm().
 */
function plupload_perm() {
  return array('bulk upload files with plupload', 'administer plupload bulk uploads');
}

/**
 * Implementation of hook_menu().
 */
function plupload_menu() {
  $items['plupload-handle-uploads'] = array(
    'title' => 'Handles uploads',
    'page callback' => 'plupload_handle_uploads',
    'access callback' => 'user_access',
    'access arguments' => array('upload files with plupload'),
    'type' => MENU_CALLBACK,
  );
  
  $items['plupload-pernode'] = array(
    'title' => 'Upload files',
    'page callback' => 'plupload_pernode',
    'access callback' => 'user_access',
    'access arguments' => array('upload files with plupload'),
    'type' => MENU_CALLBACK,
  );
  $items['plupload-test'] = array(
    'title' => 'Test Plupload',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('plupload_test'),
    'access callback' => 'user_access',
    'access arguments' => array('upload files with plupload'),
    'type' => MENU_CALLBACK,
  );
  $items['file-plupload'] = array(
    'page callback' => 'plupload_upload_page',
    'access callback' => 'user_access',
    'access arguments' => array('upload files with plupload'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/settings/plupload-bulk'] = array(
    'title' => 'Plupload integration settings',
    'description' => 'Configure the Plupload integration module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('plupload_admin_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('administer bulk uploads'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

function plupload_test($form, &$form_state) {
  $form['pud'] = array(
    '#type' => 'plupload',
    '#title' => 'Plupload',
  );
  
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit',
  );
  
  return $form;
}

function plupload_test_submit($form, &$form_state) {
  $saved_files = array();
  // We can't use file_save_upload() because of http://www.jacobsingh.name/content/tight-coupling-no-not
  //file_uri_to_object();
  foreach ($form_state['values']['pud'] as $uploaded_file) {
    if ($uploaded_file['status'] == 'done') {
      // Save it
      file_uri_to_object("temporary://" . $uploaded_file['tmpname']);
      $file = file_uri_to_object("temporary://" . $uploaded_file['tmpname']);
      file_save($file);
      file_move($file, "temporary://" . $uploaded_file['name'], FILE_EXISTS_RENAME);
      $saved_files[] = $file;
    }
    else {
      // @todo: move this to element validate or something and clean up t().
      form_set_error('pud', "Upload of {$uploaded_file['name']} failed");
    }
  }
  dsm(print_r($saved_files, 1));
}

/**
 * Implements hook_element_info().
 */
function plupload_element_info() {
  $types = array();
  $module_path = drupal_get_path('module', 'plupload');
  $types['plupload'] = array(
    '#input' => TRUE,
    '#attributes' => array('class' => array('plupload-element')),
    // @todo
    //'#element_validate' => array('file_managed_file_validate'),
    '#theme_wrappers' => array('container'),
    '#value_callback' => 'pluplod_element_value',
    '#attached' => array(
      'library' => array(array('plupload', 'plupload')),
      'js' => array($module_path . '/plupload.js'),
      'css' => array($module_path . '/plupload.css'),
    ),
  );
  return $types;
}

function pluplod_element_value(&$element, $input = FALSE, $form_state = NULL) {
  $id = $element['#id'];
  $files = array();
  foreach ($form_state['input'] as $key => $value) {
    if (preg_match('/' . $id . '_([0-9]+)_(.*)/', $key, $reg)) {
      $i = $reg[1];
      $key = $reg[2];
      $files[$i][$key] = $value;
    }
  }
  return $files;
}

/**
 * Implements hook_library().
 */
function plupload_library() {
  $module_path = drupal_get_path('module', 'plupload');
  $libraries['plupload'] = array(
    'title' => 'Plupload',
    'website' => 'http://www.plupload.com',
    'version' => '1.3.9',
    'js' => array(
      $module_path . '/plupload/js/gears_init.js' => array(),
      $module_path . '/plupload/js/jquery.plupload.queue.min.js' => array(),
      $module_path . '/plupload/js/plupload.full.min.js' => array(),
      array('type' => 'setting', 'data' => array('plupload' => array('libraryLocation' => $module_path))),
    ),
  );
  return $libraries;
}

function plupload_handle_uploads() {
  $temp_directory = file_directory_temp();

  // Chunk it?
  $chunk = isset($_REQUEST["chunk"]) ? $_REQUEST["chunk"] : 0;
  
  // Get and clean the filename.
  $file_name = isset($_REQUEST["name"]) ? $_REQUEST["name"] : '';

  // Clean the fileName for security reasons
  $file_name = preg_replace('/[^\w\._]+/', '', $file_name);
  
  
  // Look for the content type header
  if (isset($_SERVER["HTTP_CONTENT_TYPE"])) {
    $content_type = $_SERVER["HTTP_CONTENT_TYPE"];
  }
  if (isset($_SERVER["CONTENT_TYPE"])) {
    $content_type = $_SERVER["CONTENT_TYPE"];
  }

  // Is this a multipart upload?
  if (strpos($content_type, "multipart") !== false) {
    if (isset($_FILES['file']['tmp_name']) && is_uploaded_file($_FILES['file']['tmp_name'])) {
      // Open temp file
      $out = fopen($targetDir . DIRECTORY_SEPARATOR . $file_name, $chunk == 0 ? "wb" : "ab");
      if ($out) {
        // Read binary input stream and append it to temp file
        $in = fopen($_FILES['file']['tmp_name'], "rb");

        if ($in) {
          while ($buff = fread($in, 4096))
            fwrite($out, $buff);
        } else
          die('{"jsonrpc" : "2.0", "error" : {"code": 101, "message": "Failed to open input stream."}, "id" : "id"}');

        fclose($out);
        unlink($_FILES['file']['tmp_name']);
      } else
        die('{"jsonrpc" : "2.0", "error" : {"code": 102, "message": "Failed to open output stream."}, "id" : "id"}');
    } else
      die('{"jsonrpc" : "2.0", "error" : {"code": 103, "message": "Failed to move uploaded file."}, "id" : "id"}');
  }
  else {
    // Open temp file
    $out = fopen($temp_directory . DIRECTORY_SEPARATOR . $file_name, $chunk == 0 ? "wb" : "ab");
    if ($out) {
      // Read binary input stream and append it to temp file
      $in = fopen("php://input", "rb");

      if ($in) {
        while ($buff = fread($in, 4096))
          fwrite($out, $buff);
      } else
        die('{"jsonrpc" : "2.0", "error" : {"code": 101, "message": "Failed to open input stream."}, "id" : "id"}');

      fclose($out);
    } else
      die('{"jsonrpc" : "2.0", "error" : {"code": 102, "message": "Failed to open output stream."}, "id" : "id"}');
  }
  
  // Return JSON-RPC response
  die('{"jsonrpc" : "2.0", "result" : null, "id" : "id"}');

}

if (!function_exists('file_uri_to_object')) {
  // @todo: get this committed http://drupal.org/node/685818

  /**
   * Returns a file object which can be passed to file_save().
   *
   * @param $uri
   *  A string containing the URI, path, or filename.
   * @return
   *  A file object, or FALSE on error.
   */
  function file_uri_to_object($uri) {
    global $user;
    $uri = file_stream_wrapper_uri_normalize($uri);
    $wrapper = file_stream_wrapper_get_instance_by_uri($uri);
    $file = new StdClass;
    $file->uid = $user->uid;
    $file->filename = basename($uri);
    $file->uri = $uri;
    $file->filemime = file_get_mimetype($uri);
    // This is gagged because some uris will not support it.
    $file->filesize = @filesize($uri);
    $file->timestamp = REQUEST_TIME;
    $file->status = FILE_STATUS_PERMANENT;
    return $file;
  }
}